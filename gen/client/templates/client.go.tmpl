package fhir

import (
	"context"
	"encoding/json"

	"github.com/gotidy/fhir-client/models"
)

type ClientInterface interface {
	DoRequest(ctx context.Context, req *http.Request) (*FhirResponse, error)
	RequestWithBodyReader(ctx context.Context, method string, path string, params Parameters, body io.Reader) (*FhirResponse, error)
	RequestWithBody(ctx context.Context, method string, path string, params Parameters, body interface{}) (*FhirResponse, error)
	Request(ctx context.Context, method string, path string, params Parameters) (*FhirResponse, error)
	Get(ctx context.Context, resource ResourceType, params Parameters) (*FhirResponse, error)
	GetByID(ctx context.Context, resource ResourceType, id string, params Parameters) (*FhirResponse, error)
	Create(ctx context.Context, resource ResourceType, params Parameters, body interface{}) (*FhirResponse, error)
	Update(ctx context.Context, resource ResourceType, params Parameters, body interface{}) (*FhirResponse, error)
	UpdateByID(ctx context.Context, resource ResourceType, id string, params Parameters, body interface{}) (*FhirResponse, error)
	Patch(ctx context.Context, resource ResourceType, params Parameters, body interface{}) (*FhirResponse, error)
	PatchByID(ctx context.Context, resource ResourceType, id string, params Parameters, body interface{}) (*FhirResponse, error)

	{{- range $entity := .Entities}}
	{{- if ne $entity "Bundle"}}
	Get{{$entity}}(ctx context.Context, params Parameters) ([]*models.{{$entity}}, error)
	Get{{$entity}}ByID(ctx context.Context, id string, params Parameters) (*models.{{$entity}}, error)
	Create{{$entity}}(ctx context.Context, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error)
	Update{{$entity}}(ctx context.Context, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error)
	Update{{$entity}}ByID(ctx context.Context, id string, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error)
	Patch{{$entity}}(ctx context.Context, params Parameters, entity *models.{{$entity}}) ([]*models.{{$entity}}, error)
	Patch{{$entity}}ByID(ctx context.Context, id string, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error)
	Delete{{$entity}}(ctx context.Context, params Parameters) ([]*models.{{$entity}}, error)
	Delete{{$entity}}ByID(ctx context.Context, id string, params Parameters) (*models.{{$entity}}, error)
	{{- end}}
	{{- end}}	
}

var _ ClientInterface = (*Client)(nil)

{{- range $entity := .Entities}}
{{- if ne $entity "Bundle"}}
// ---------------------------------------------------------------------------------------------------------------------------
// {{$entity}}
// ---------------------------------------------------------------------------------------------------------------------------

func bundleTo{{$entity}}s(bundle *models.Bundle) ([]*models.{{$entity}}, error) {
	var entities []*models.{{$entity}}
	err := EnumBundleResources(bundle, "{{$entity}}", func(resource ResourceData) error {
		var entity models.{{$entity}}
		if err := resource.UnmarshalTo(&entity); err != nil {
			return NewUnmarshalError("resource parsing", "{{$entity}}", []byte(resource), err)
		}
		entities = append(entities, &entity)
		return nil
	})
	if err != nil {
		return nil, err
	}

	return entities, nil
}

func fhirRespTo{{$entity}}s(resp *FhirResponse) ([]*models.{{$entity}}, error) {
	switch resp.ResourceType {
	case "Bundle":
		return bundleTo{{$entity}}s(resp.Bundle)
	case "{{$entity}}":
		var entity models.{{$entity}}
		if err := json.Unmarshal(resp.Body, &entity); err != nil {
			return nil, NewUnmarshalError("resource parsing", resp.ResourceType, resp.Body, err)
		}
		return []*models.{{$entity}}{&entity}, nil
	}
	return nil, nil
}

func fhirRespTo{{$entity}}(id string, resp *FhirResponse) (*models.{{$entity}}, error) {
	entities, err := fhirRespTo{{$entity}}s(resp)
	if err != nil {
		return nil, err
	}
	if err := checkSingular(id, "{{$entity}}", len(entities)); err != nil {
		return nil, err
	}
	return entities[0], nil
}

// Get {{$entity}}.
func (c *Client) Get{{$entity}}(ctx context.Context, params Parameters) ([]*models.{{$entity}}, error) {
	resp, err := c.Get(ctx, "{{$entity}}", params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}s(resp)
}

// Get {{$entity}} by ID.
func (c *Client) Get{{$entity}}ByID(ctx context.Context, id string, params Parameters) (*models.{{$entity}}, error) {
	resp, err := c.GetByID(ctx, "{{$entity}}", id, params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}(id, resp)
}

func (c *Client) Create{{$entity}}(ctx context.Context, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error) {
	resp, err := c.Create(ctx, "{{$entity}}", params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}(StrPtrToStr(entity.ID), resp)
}

func (c *Client) Update{{$entity}}(ctx context.Context, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error) {
	resp, err := c.Update(ctx, "{{$entity}}", params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}(StrPtrToStr(entity.ID), resp)
}

func (c *Client) Update{{$entity}}ByID(ctx context.Context, id string, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error) {
	resp, err := c.UpdateByID(ctx, "{{$entity}}", id, params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}(id, resp)
}

func (c *Client) Patch{{$entity}}(ctx context.Context, params Parameters, entity *models.{{$entity}}) ([]*models.{{$entity}}, error) {
	resp, err := c.Patch(ctx, "{{$entity}}", params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}s(resp)
}

func (c *Client) Patch{{$entity}}ByID(ctx context.Context, id string, params Parameters, entity *models.{{$entity}}) (*models.{{$entity}}, error) {
	resp, err := c.PatchByID(ctx, "{{$entity}}", id, params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}(id, resp)
}

func (c *Client) Delete{{$entity}}(ctx context.Context, params Parameters) ([]*models.{{$entity}}, error) {
	resp, err := c.Delete(ctx, "{{$entity}}", params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}s(resp)
}

func (c *Client) Delete{{$entity}}ByID(ctx context.Context, id string, params Parameters) (*models.{{$entity}}, error) {
	resp, err := c.DeleteByID(ctx, "{{$entity}}", id, params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{$entity}}(id, resp)
}

{{- end}}
{{- end}}