package fhir

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/gotidy/fhir-client/models"
)

{{range .Entities}}
// ---------------------------------------------------------------------------------------------------------------------------
// {{.Name}}
// ---------------------------------------------------------------------------------------------------------------------------

func bundleTo{{.Name}}s(bundle *models.Bundle) ([]*models.{{.Name}}, error) {
	var entities []*models.{{.Name}}
	err := EnumBundleResources(bundle, "{{.Name}}", func(resource ResourceData) error {
		var entity models.{{.Name}}
		if err := resource.UnmarshalTo(&entity); err != nil {
			return err
		}
		entities = append(entities, &entity)
		return nil
	})
	if err != nil {
		return nil, err
	}

	return entities, nil
}

func fhirRespTo{{.Name}}s(resp *FhirResponse) ([]*models.{{.Name}}, error) {
	switch resp.ResourceType {
	case "Bundle":
		return bundleTo{{.Name}}s(resp.Bundle)
	case "{{.Name}}":
		var entity models.{{.Name}}
		if err := json.Unmarshal(resp.Body, &entity); err != nil {
			return nil, err
		}
		return []*models.{{.Name}}{&entity}, nil
	}
	return nil, nil
}

func fhirRespTo{{.Name}}(id string, resp *FhirResponse) (*models.{{.Name}}, error) {
	entities, err := fhirRespTo{{.Name}}s(resp)
	if err != nil {
		return nil, err
	}
	if err := checkSingular(id, "{{.Name}}", len(entities)); err != nil {
		return nil, err
	}
	return entities[0], nil
}

// Get {{.Name}}.
func (c *Client) Get{{.Name}}(ctx context.Context, params Parameters) ([]*models.{{.Name}}, error) {
	resp, err := c.Get(ctx, "{{.Name}}", params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}s(resp)
}

// Get {{.Name}} by ID.
func (c *Client) Get{{.Name}}ByID(ctx context.Context, id string, params Parameters) (*models.{{.Name}}, error) {
	resp, err := c.GetByID(ctx, "{{.Name}}", id, params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}(id, resp)
}

func (c *Client) Create{{.Name}}(ctx context.Context, resource string, params Parameters, entity *models.{{.Name}}) (*models.{{.Name}}, error) {
	resp, err := c.Create(ctx, "{{.Name}}", params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}(StrPtrToStr(entity.ID), resp)
}

func (c *Client) Update{{.Name}}(ctx context.Context, resource string, params Parameters, entity *models.{{.Name}}) (*models.{{.Name}}, error) {
	resp, err := c.Update(ctx, "{{.Name}}", params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}(StrPtrToStr(entity.ID), resp)
}

func (c *Client) Update{{.Name}}ByID(ctx context.Context, resource, id string, params Parameters, entity *models.{{.Name}}) (*models.{{.Name}}, error) {
	resp, err := c.UpdateByID(ctx, "{{.Name}}", id, params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}(id, resp)
}

func (c *Client) Patch{{.Name}}(ctx context.Context, resource string, params Parameters, entity *models.{{.Name}}) ([]*models.{{.Name}}, error) {
	resp, err := c.Patch(ctx, "{{.Name}}", params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}s(resp)
}

func (c *Client) Patch{{.Name}}ByID(ctx context.Context, resource, id string, params Parameters, entity *models.{{.Name}}) (*models.{{.Name}}, error) {
	resp, err := c.PatchByID(ctx, "{{.Name}}", id, params, entity)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}(id, resp)
}

func (c *Client) Delete{{.Name}}(ctx context.Context, resource string, params Parameters) ([]*models.{{.Name}}, error) {
	resp, err := c.Delete(ctx, "{{.Name}}", params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}s(resp)
}

func (c *Client) Delete{{.Name}}ByID(ctx context.Context, resource, id string, params Parameters) (*models.{{.Name}}, error) {
	resp, err := c.DeleteByID(ctx, "{{.Name}}", id, params)
	if err != nil {
		return nil, err
	}

	return fhirRespTo{{.Name}}(id, resp)
}

{{end}}